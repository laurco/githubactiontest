name: CI Flask App - Max Notify

on:
  push:
    branches: [ main ]

env:
  REPO: ${{ github.repository }}
  REF: ${{ github.ref }}
  WEBHOOK_URL: https://karri-fruity-wrongfully.ngrok-free.dev/webhook
  NGROK_SECRET: ${{ secrets.DEPLOY_ROBOT_SECRET }}

jobs:
  # === 1. CI Linux (tests, notifications) ===
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        run: |
          pip install --upgrade pip

      # === NOTIFY START ===
      - name: Notify Pipeline Start
        run: |
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" \
            --arg ref "$REF" \
            --arg time "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
            '{type:"start", repo:$repo, branch:$ref, start_time:$time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          echo "Sending START..."
          curl -v \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" \
            -d "$PAYLOAD" || echo "curl failed"

      - name: Notify Step Start - Setup Python
        run: |
          PAYLOAD=$(jq -n --arg repo "$REPO" --arg ref "$REF" --arg step "Setup Python" \
            '{type:"step_start", repo:$repo, branch:$ref, job:"ci", step:$step}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -v -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"

      - name: Install Dependencies
        id: install
        continue-on-error: true
        run: |
          pip install -r requirements.txt

      - name: Notify Step End - Install deps
        run: |
          STATUS=$([ "${{ steps.install.outcome }}" = "success" ] && echo "Successful" || echo "Failed")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg step "Install deps" --arg status "$STATUS" \
            '{type:"step_end", repo:$repo, branch:$ref, job:"ci", step:$step, status_end:$status}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -v -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"

      - name: Run Tests
        id: tests
        continue-on-error: true
        run: |
          pytest test_app.py -v

      - name: Notify Step End - Run Tests
        run: |
          STATUS=$([ "${{ steps.tests.outcome }}" = "success" ] && echo "Successful" || echo "Failed")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg step "Run Tests" --arg status "$STATUS" \
            '{type:"step_end", repo:$repo, branch:$ref, job:"ci", step:$step, status_end:$status}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -v -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"

      - name: Archive Results
        if: always()
        run: |
          zip -r results.zip .

      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-results
          path: results.zip

      - name: Notify Pipeline End
        if: always()
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          ARTIFACT_URL="https://github.com/$REPO/actions/runs/$GITHUB_RUN_ID"
          STATUS=$([ "${{ job.status }}" = "success" ] && echo "Successful" || echo "Failed")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg time "$END_TIME" \
            --arg url "$ARTIFACT_URL" --arg status "$STATUS" \
            '{type:"end", repo:$repo, branch:$ref, end_time:$time, artifact_url:$url, status:$status}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -v -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"

  # === 2. BUILD EXE (Windows) ===
  build-exe:
    needs: ci
    if: success()
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # === NOTIFY EXE BUILD START ===
      - name: Notify EXE Build Start
        run: |
          $payload = @{
            type = "exe_build_start"
            repo = "$env:REPO"
            branch = "$env:REF"
            start_time = (Get-Date -Format "yyyy-MM-dd HH:mm:ss") + " UTC"
          } | ConvertTo-Json -Compress
          $signature = & openssl dgst -sha256 -hmac "$env:NGROK_SECRET" -binary <<< $payload | & openssl dgst -sha256 -hex | ForEach-Object { $_.Split("=")[1].Trim() }
          Write-Host "Sending EXE BUILD START..."
          curl -v -X POST "$env:WEBHOOK_URL" `
            -H "Content-Type: application/json" `
            -H "X-Ngrok-Hmac-Signature: $signature" `
            -d $payload

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PyInstaller + deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build EXE with PyInstaller
        id: build
        continue-on-error: true
        run: |
          pyinstaller --onefile --name "FlaskApp" app.py
          if ($LASTEXITCODE -eq 0) { echo "EXE built successfully" } else { echo "Build failed"; exit 1 }

      - name: Package EXE
        if: steps.build.outcome == 'success'
        run: |
          mkdir release
          Copy-Item dist/FlaskApp.exe release/
          Copy-Item requirements.txt release/  # optionnel
          Compress-Archive -Path release/* -DestinationPath FlaskApp-Windows.zip

      - name: Upload EXE Artifact
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: FlaskApp-Windows-EXE
          path: FlaskApp-Windows.zip

      # === NOTIFY EXE BUILD END ===
      - name: Notify EXE Build End
        if: always()
        run: |
          $status = if ("${{ steps.build.outcome }}" -eq "success") { "Successful" } else { "Failed" }
          $artifact = if ($status -eq "Successful") { "https://github.com/$env:REPO/actions/runs/$env:GITHUB_RUN_ID" } else { "" }
          $payload = @{
            type = "exe_build_end"
            repo = "$env:REPO"
            branch = "$env:REF"
            end_time = (Get-Date -Format "yyyy-MM-dd HH:mm:ss") + " UTC"
            status = $status
            artifact_url = $artifact
          } | ConvertTo-Json -Compress
          $signature = & openssl dgst -sha256 -hmac "$env:NGROK_SECRET" -binary <<< $payload | & openssl dgst -sha256 -hex | ForEach-Object { $_.Split("=")[1].Trim() }
          curl -v -X POST "$env:WEBHOOK_URL" `
            -H "Content-Type: application/json" `
            -H "X-Ngrok-Hmac-Signature: $signature" `
            -d $payload