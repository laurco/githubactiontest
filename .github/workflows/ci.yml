name: CI Flask App - Max Notify

on:
  push:
    branches: [ main ]

env:
  REPO: ${{ github.repository }}
  REF: ${{ github.ref }}
  # URL hardcodée (comme tu veux)
  WEBHOOK_URL: https://karri-fruity-wrongfully.ngrok-free.dev/webhook

jobs:
  # === 1. Notification de démarrage ===
  start-notify:
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{ steps.timestamp.outputs.time }}
    steps:
      - name: Log environment variables
        run: |
          echo "::group::[DEBUG] Environment variables"
          echo "REPO=${{ env.REPO }}"
          echo "REF=${{ env.REF }}"
          echo "RUN_ID=${{ github.run_id }}"
          echo "WEBHOOK_URL=$WEBHOOK_URL"
          echo "::endgroup::"

      - name: Get start timestamp
        id: timestamp
        run: |
          echo "time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify pipeline start (DEBUG)
        run: |
          echo "Sending START notification..."
          echo "URL: $WEBHOOK_URL"
          echo "Payload:"
          jq -n \
            --arg repo "${{ env.REPO }}" \
            --arg ref "${{ env.REF }}" \
            --arg date "${{ steps.timestamp.outputs.time }}" \
            '{type:"start", repo:$repo, branch:$ref, start_time:$date}'

          curl -v \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg repo "${{ env.REPO }}" \
              --arg ref "${{ env.REF }}" \
              --arg date "${{ steps.timestamp.outputs.time }}" \
              '{type:"start", repo:$repo, branch:$ref, start_time:$date}')" \
            || echo "curl failed (but continuing)"

  # === 2. Job principal ===
  main:
    needs: start-notify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        run: |
          pip install --upgrade pip

      - name: Notify Step Start - Setup Python (DEBUG)
        run: |
          echo "Sending STEP START: Setup Python"
          curl -v \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg repo "${{ env.REPO }}" \
              --arg ref "${{ env.REF }}" \
              --arg job "main" \
              --arg step "Setup Python" \
              '{type:"step_start", repo:$repo, branch:$ref, job:$job, step:$step}')" \
            || echo "curl failed"

      - name: Install deps
        id: install
        continue-on-error: true
        run: |
          pip install -r requirements.txt

      - name: Notify Step End - Install deps (DEBUG)
        run: |
          STATUS=$([ "${{ steps.install.outcome }}" = "success" ] && echo "Successful" || echo "Failed")
          echo "Sending STEP END: Install deps → $STATUS"
          curl -v \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg repo "${{ env.REPO }}" \
              --arg ref "${{ env.REF }}" \
              --arg job "main" \
              --arg step "Install deps" \
              --arg status_end "$STATUS" \
              '{type:"step_end", repo:$repo, branch:$ref, job:$job, step:$step, status_end:$status_end}')" \
            || echo "curl failed"

      - name: Run tests
        id: tests
        continue-on-error: true
        run: |
          pytest test_app.py -v

      - name: Notify Step End - Run tests (DEBUG)
        run: |
          STATUS=$([ "${{ steps.tests.outcome }}" = "success" ] && echo "Successful" || echo "Failed")
          echo "Sending STEP END: Run tests → $STATUS"
          curl -v \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg repo "${{ env.REPO }}" \
              --arg ref "${{ env.REF }}" \
              --arg job "main" \
              --arg step "Run tests" \
              --arg status_end "$STATUS" \
              '{type:"step_end", repo:$repo, branch:$ref, job:$job, step:$step, status_end:$status_end}')" \
            || echo "curl failed"

      - name: Archive results
        run: |
          zip -r results.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-results
          path: results.zip

  # === 3. Échec ===
  fail-notify:
    if: failure()
    needs: [start-notify, main]
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure (DEBUG)
        run: |
          echo "Sending FAILURE notification"
          curl -v \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg repo "${{ env.REPO }}" \
              --arg ref "${{ env.REF }}" \
              --arg date "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
              --arg step "${{ github.job }}" \
              '{type:"fail", repo:$repo, branch:$ref, failed_step:$step, fail_time:$date}')" \
            || echo "curl failed"

  # === 4. Fin ===
  end-notify:
    if: always()
    needs: [start-notify, main]
    runs-on: ubuntu-latest
    steps:
      - name: Get end timestamp
        id: timestamp
        run: |
          echo "time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify pipeline end (DEBUG)
        run: |
          ARTIFACT_URL="https://github.com/${{ env.REPO }}/actions/runs/${{ github.run_id }}"
          STATUS=$([ "${{ needs.main.result }}" = "success" ] && echo "Successful" || echo "Failed")
          echo "Sending END notification → $STATUS"
          curl -v \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg repo "${{ env.REPO }}" \
              --arg ref "${{ env.REF }}" \
              --arg date "${{ steps.timestamp.outputs.time }}" \
              --arg url "$ARTIFACT_URL" \
              --arg status "$STATUS" \
              '{type:"end", repo:$repo, branch:$ref, end_time:$date, artifact_url:$url, status:$status}')" \
            || echo "curl failed"