name: CI Flask App - Jobs Séparés (UI GitHub)

on:
  push:
    branches: [ main ]

env:
  REPO: ${{ github.repository }}
  REF: ${{ github.ref }}
  COMMIT: ${{ github.sha }}
  WEBHOOK_URL: https://karri-fruity-wrongfully.ngrok-free.dev/webhook
  NGROK_SECRET: ${{ secrets.DEPLOY_ROBOT_SECRET }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # === JOB 1: CHECKOUT ===
  ci-checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Notify Checkout Done
        run: |
          echo "Checkout terminé" >> $GITHUB_STEP_SUMMARY

  # === JOB 2: SETUP PYTHON ===
  ci-setup-python:
    needs: ci-checkout
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Upload source for next jobs
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .

  # === JOB 3: INSTALL DEPS ===
  ci-install-deps:
    needs: ci-setup-python
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .
      - name: Create requirements.txt
        run: |
          cat > requirements.txt << EOF
          Flask==3.0.3
          pytest==8.3.3
          PyInstaller==6.10.0
          EOF
      - name: Notify Step Start - Install deps
        run: |
          START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Install deps" --arg status "START" --arg start_time "$START_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, start_time:$start_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"
      - name: Install Dependencies
        id: install
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Notify Step End - Install deps
        if: always()
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          STATUS=$([ "${{ steps.install.outcome }}" = "success" ] && echo "END" || echo "FAILED")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Install deps" --arg status "$STATUS" --arg end_time "$END_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, end_time:$end_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"

  # === JOB 4: RUN TESTS ===
  ci-run-tests:
    needs: ci-install-deps
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .
      - name: Notify Step Start - Run Tests
        run: |
          START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Run Tests" --arg status "START" --arg start_time "$START_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, start_time:$start_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"
      - name: Run Tests
        id: tests
        continue-on-error: true
        run: |
          pytest test_app.py -v || echo "Tests failed or not found"
      - name: Notify Step End - Run Tests
        if: always()
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          STATUS=$([ "${{ steps.tests.outcome }}" = "success" ] && echo "END" || echo "FAILED")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Run Tests" --arg status "$STATUS" --arg end_time "$END_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, end_time:$end_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"

  # === JOB 5: ARCHIVE & UPLOAD ===
  ci-archive-upload:
    needs: ci-run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .
      - name: Archive CI Results
        run: |
          zip -r ci-results-${{ github.run_number }}.zip . -x "*.git*"
      - name: Upload CI Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ci-results-${{ github.run_number }}
          path: ci-results-${{ github.run_number }}.zip
      - name: Get Artifact Download URL
        id: artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_NAME="ci-results-${{ github.run_number }}"
          ARTIFACT_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPO/actions/runs/$GITHUB_RUN_ID/artifacts" \
            --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .id")
          DOWNLOAD_URL=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPO/actions/artifacts/$ARTIFACT_ID/zip" \
            --jq '.archive_download_url')
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

  # === JOB 6: NOTIFY PIPELINE END (Artefact envoyé ici) ===
  ci-notify-end:
    needs: ci-archive-upload
    runs-on: ubuntu-latest
    steps:
      - name: Notify Pipeline Start (début global)
        run: |
          START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg status "START" --arg start_time "$START_TIME" \
            '{type:"pipeline", repo:$repo, branch:$ref, commit:$commit, status:$status, start_time:$start_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"
      - name: Notify Pipeline End
        if: always()
        env:
          ARTIFACT_URL: ${{ needs.ci-archive-upload.outputs.download_url }}
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          STATUS=$([ "${{ needs.ci-archive-upload.result }}" = "success" ] && echo "END" || echo "FAILED")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg status "$STATUS" --arg end_time "$END_TIME" \
            --arg artifact_url "$ARTIFACT_URL" \
            '{type:"pipeline", repo:$repo, branch:$ref, commit:$commit, status:$status, end_time:$end_time, artifact_url:$artifact_url}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"

  # === JOB 7: BUILD BINARY (optionnel, séparé) ===
  build-binary:
    needs: ci-notify-end
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .
      - name: Notify Step Start - Build Binary
        run: |
          START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" \
            --arg step "Build Binary" --arg status "START" --arg start_time "$START_TIME" \
            '{type:"step", repo:$repo, branch:$ref, step:$step, status:$status, start_time:$start_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"
      - name: Build Binary
        run: |
          pyinstaller --onefile --name FlaskApp-Linux app.py
          chmod +x dist/FlaskApp-Linux
          zip FlaskApp-Linux-${{ github.run_number }}.zip dist/FlaskApp-Linux
      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: FlaskApp-Linux-${{ github.run_number }}
          path: FlaskApp-Linux-${{ github.run_number }}.zip
      - name: Notify Step End - Build Binary
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" \
            --arg step "Build Binary" --arg status "END" --arg end_time "$END_TIME" \
            '{type:"step", repo:$repo, branch:$ref, step:$step, status:$status, end_time:$end_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" -d "$PAYLOAD"