name: CI Flask App - Max Notify (Détaillé Steps)

on:
  push:
    branches: [ main ]

env:
  REPO: ${{ github.repository }}
  REF: ${{ github.ref }}
  COMMIT: ${{ github.sha }}
  WEBHOOK_URL: https://karri-fruity-wrongfully.ngrok-free.dev/webhook
  NGROK_SECRET: ${{ secrets.DEPLOY_ROBOT_SECRET }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # === 1. CI (Étapes Détaillées) ===
  ci:
    runs-on: ubuntu-latest
    steps:
      # === PHASE 1: CHECKOUT ===
      - name: Checkout code (Phase 1/7)
        uses: actions/checkout@v4
        # Visible dans GUI: Logs du clone du repo

      # === PHASE 2: SETUP PYTHON ===
      - name: Set up Python (Phase 2/7)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        # Visible: Installation Python + cache pip

      # === PHASE 3: CRÉER REQUIREMENTS ===
      - name: Create requirements.txt (Phase 3/7)
        run: |
          cat > requirements.txt << EOF
          Flask==3.0.3
          pytest==8.3.3
          PyInstaller==6.10.0
          EOF
        # Visible: Contenu du fichier généré

      # === NOTIFICATION: PIPELINE START ===
      - name: Notify Pipeline Start (Notification 1/5)
        run: |
          START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg status "START" --arg start_time "$START_TIME" \
            '{type:"pipeline", repo:$repo, branch:$ref, commit:$commit, status:$status, start_time:$start_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" \
            -d "$PAYLOAD"
        # Visible: Logs du curl (payload + signature)

      # === PHASE 4: INSTALL DEPS ===
      - name: Notify Step Start - Install deps (Notification 2/5)
        run: |
          START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Install deps" --arg status "START" --arg start_time "$START_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, start_time:$start_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" \
            -d "$PAYLOAD"

      - name: Install Dependencies (Phase 4/7)
        id: install
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
        # Visible: Logs pip (packages installés, temps)

      - name: Notify Step End - Install deps (Notification 3/5)
        if: always()
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          STATUS=$([ "${{ steps.install.outcome }}" = "success" ] && echo "END" || echo "FAILED")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Install deps" --arg status "$STATUS" --arg end_time "$END_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, end_time:$end_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" \
            -d "$PAYLOAD"

      # === PHASE 5: RUN TESTS ===
      - name: Notify Step Start - Run Tests (Notification 4/5)
        run: |
          START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Run Tests" --arg status "START" --arg start_time "$START_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, start_time:$start_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" \
            -d "$PAYLOAD"

      - name: Run Tests (Phase 5/7)
        id: tests
        continue-on-error: true
        run: |
          pytest test_app.py -v || echo "Tests failed or not found"
        # Visible: Output pytest (tests passés/échoués)

      - name: Notify Step End - Run Tests (Notification 5/5)
        if: always()
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          STATUS=$([ "${{ steps.tests.outcome }}" = "success" ] && echo "END" || echo "FAILED")
          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg step "Run Tests" --arg status "$STATUS" --arg end_time "$END_TIME" \
            '{type:"step", repo:$repo, branch:$ref, commit:$commit, step:$step, status:$status, end_time:$end_time}')
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" \
            -d "$PAYLOAD"

      # === PHASE 6: ARCHIVE ===
      - name: Archive CI Results (Phase 6/7)
        if: always()
        run: |
          zip -r ci-results-${{ github.run_number }}.zip . -x "*.git*"
        # Visible: Contenu du ZIP (fichiers inclus)

      # === PHASE 7: UPLOAD + NOTIFY END ===
      - name: Upload CI Artifact (Phase 7/7)
        id: upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-results-${{ github.run_number }}
          path: ci-results-${{ github.run_number }}.zip
        # Visible: Taille du ZIP uploadé

      - name: Get CI Artifact Download URL
        id: artifact
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_NAME="ci-results-${{ github.run_number }}"
          ARTIFACT_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPO/actions/runs/$GITHUB_RUN_ID/artifacts" \
            --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .id")

          DOWNLOAD_URL=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPO/actions/artifacts/$ARTIFACT_ID/zip" \
            --jq '.archive_download_url')

          echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
        # Visible: Logs `gh api` (ID + URL)

      - name: Notify Pipeline End (Artefact envoyé ici)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          END_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          STATUS=$([ "${{ job.status }}" = "success" ] && echo "END" || echo "FAILED")
          ARTIFACT_URL="${{ steps.artifact.outputs.download_url }}"

          PAYLOAD=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg commit "$COMMIT" \
            --arg status "$STATUS" --arg end_time "$END_TIME" \
            --arg artifact_url "$ARTIFACT_URL" \
            '{type:"pipeline", repo:$repo, branch:$ref, commit:$commit, status:$status, end_time:$end_time, artifact_url:$artifact_url}')
          
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$NGROK_SECRET" | awk '{print $2}')
          curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Ngrok-Hmac-Signature: $SIGNATURE" \
            -d "$PAYLOAD"
        # Visible: Payload envoyé (avec artefact URL)