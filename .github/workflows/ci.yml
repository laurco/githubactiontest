name: CI Flask App - Max Notify

on:
  push:
    branches: [ main ]

env:
  REPO: ${{ github.repository }}
  REF: ${{ github.ref }}
  WEBHOOK_URL: https://karri-fruity-wrongfully.ngrok-free.dev/webhook
  NGROK_SECRET: ${{ secrets.DEPLOY_ROBOT_SECRET }}

jobs:
  # === 1. Démarrage ===
  start-notify:
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{ steps.timestamp.outputs.time }}
    steps:
      - name: Log env
        run: |
          echo "::group::[DEBUG]"
          echo "REPO=$REPO"
          echo "REF=$REF"
          echo "WEBHOOK_URL=$WEBHOOK_URL"
          echo "SECRET set? ${{ secrets.DEPLOY_ROBOT_SECRET != '' }}"
          echo "::endgroup::"

      - name: Get start timestamp
        id: timestamp
        run: |
          echo "time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify pipeline start
        env:
          TYPE: start
          STEP: ""
          EXTRA: '{"start_time": "${{ steps.timestamp.outputs.time }}"}'
        run: |
          . .github/scripts/notify.sh "$TYPE" "$STEP" "$EXTRA"

  # === 2. Main ===
  main:
    needs: start-notify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        run: pip install --upgrade pip

      - name: Notify Step Start - Setup Python
        env:
          TYPE: step_start
          STEP: Setup Python
        run: |
          . .github/scripts/notify.sh "$TYPE" "$STEP"

      - name: Install deps
        id: install
        continue-on-error: true
        run: pip install -r requirements.txt

      - name: Notify Step End - Install deps
        env:
          TYPE: step_end
          STEP: Install deps
          STATUS: ${{ steps.install.outcome == 'success' && 'Successful' || 'Failed' }}
        run: |
          . .github/scripts/notify.sh "$TYPE" "$STEP" "$STATUS"

      - name: Run tests
        id: tests
        continue-on-error: true
        run: pytest test_app.py -v

      - name: Notify Step End - Run tests
        env:
          TYPE: step_end
          STEP: Run tests
          STATUS: ${{ steps.tests.outcome == 'success' && 'Successful' || 'Failed' }}
        run: |
          . .github/scripts/notify.sh "$TYPE" "$STEP" "$STATUS"

      - name: Archive results
        run: zip -r results.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-results
          path: results.zip

  # === 3. Échec ===
  fail-notify:
    if: failure()
    needs: [start-notify, main]
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure
        env:
          TYPE: fail
          STEP: ${{ github.job }}
          EXTRA: '{"fail_time": "$(date -u \"+%Y-%m-%d %H:%M:%S UTC\")"}'
        run: |
          . .github/scripts/notify.sh "$TYPE" "$STEP" "$EXTRA"

  # === 4. Fin (CORRIGÉE !) ===
  end-notify:
    if: always()
    needs: [start-notify, main]
    runs-on: ubuntu-latest
    steps:
      - name: Get end timestamp
        id: timestamp
        run: |
          echo "time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify pipeline end
        env:
          TYPE: end
          STEP: ""
          STATUS: ${{ needs.main.result == 'success' && 'Successful' || 'Failed' }}
        run: |
          # Construire EXTRA proprement
          EXTRA=$(jq -n \
            --arg et "${{ steps.timestamp.outputs.time }}" \
            --arg url "https://github.com/$REPO/actions/runs/$RUN_ID" \
            --arg status "$STATUS" \
            '{end_time: $et, artifact_url: $url, status: $status}')

          . .github/scripts/notify.sh "$TYPE" "$STEP" "$EXTRA"